// Code generated by "stringer -type HandshakeStatus,MessageClass,ControlMessageType,ErrorMessageType,StickTableUpdateMessageType -output=constants_string.go"; DO NOT EDIT.

package peers

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HandshakeStatusHandshakeSucceeded-200]
	_ = x[HandshakeStatusTryAgainLater-300]
	_ = x[HandshakeStatusProtocolError-501]
	_ = x[HandshakeStatusBadVersion-502]
	_ = x[HandshakeStatusLocalPeerIdentifierMismatch-503]
	_ = x[HandshakeStatusRemotePeerIdentifierMismatch-504]
}

const (
	_HandshakeStatus_name_0 = "HandshakeStatusHandshakeSucceeded"
	_HandshakeStatus_name_1 = "HandshakeStatusTryAgainLater"
	_HandshakeStatus_name_2 = "HandshakeStatusProtocolErrorHandshakeStatusBadVersionHandshakeStatusLocalPeerIdentifierMismatchHandshakeStatusRemotePeerIdentifierMismatch"
)

var (
	_HandshakeStatus_index_2 = [...]uint8{0, 28, 53, 95, 138}
)

func (i HandshakeStatus) String() string {
	switch {
	case i == 200:
		return _HandshakeStatus_name_0
	case i == 300:
		return _HandshakeStatus_name_1
	case 501 <= i && i <= 504:
		i -= 501
		return _HandshakeStatus_name_2[_HandshakeStatus_index_2[i]:_HandshakeStatus_index_2[i+1]]
	default:
		return "HandshakeStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MessageClassControl-0]
	_ = x[MessageClassError-1]
	_ = x[MessageClassStickTableUpdates-10]
	_ = x[MessageClassReserved-255]
}

const (
	_MessageClass_name_0 = "MessageClassControlMessageClassError"
	_MessageClass_name_1 = "MessageClassStickTableUpdates"
	_MessageClass_name_2 = "MessageClassReserved"
)

var (
	_MessageClass_index_0 = [...]uint8{0, 19, 36}
)

func (i MessageClass) String() string {
	switch {
	case i <= 1:
		return _MessageClass_name_0[_MessageClass_index_0[i]:_MessageClass_index_0[i+1]]
	case i == 10:
		return _MessageClass_name_1
	case i == 255:
		return _MessageClass_name_2
	default:
		return "MessageClass(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ControlMessageSyncRequest-0]
	_ = x[ControlMessageSyncFinished-1]
	_ = x[ControlMessageSyncPartial-2]
	_ = x[ControlMessageSyncConfirmed-3]
	_ = x[ControlMessageHeartbeat-4]
}

const _ControlMessageType_name = "ControlMessageSyncRequestControlMessageSyncFinishedControlMessageSyncPartialControlMessageSyncConfirmedControlMessageHeartbeat"

var _ControlMessageType_index = [...]uint8{0, 25, 51, 76, 103, 126}

func (i ControlMessageType) String() string {
	if i >= ControlMessageType(len(_ControlMessageType_index)-1) {
		return "ControlMessageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ControlMessageType_name[_ControlMessageType_index[i]:_ControlMessageType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ErrorMessageProtocol-0]
	_ = x[ErrorMessageSizeLimit-1]
}

const _ErrorMessageType_name = "ErrorMessageProtocolErrorMessageSizeLimit"

var _ErrorMessageType_index = [...]uint8{0, 20, 41}

func (i ErrorMessageType) String() string {
	if i >= ErrorMessageType(len(_ErrorMessageType_index)-1) {
		return "ErrorMessageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ErrorMessageType_name[_ErrorMessageType_index[i]:_ErrorMessageType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StickTableUpdateMessageTypeEntryUpdate-128]
	_ = x[StickTableUpdateMessageTypeIncrementalEntryUpdate-129]
	_ = x[StickTableUpdateMessageTypeStickTableDefinition-130]
	_ = x[StickTableUpdateMessageTypeStickTableSwitch-131]
	_ = x[StickTableUpdateMessageTypeUpdateAcknowledge-132]
	_ = x[StickTableUpdateMessageTypeUpdateTimed-133]
	_ = x[StickTableUpdateMessageTypeIncrementalEntryUpdateTimed-134]
}

const _StickTableUpdateMessageType_name = "StickTableUpdateMessageTypeEntryUpdateStickTableUpdateMessageTypeIncrementalEntryUpdateStickTableUpdateMessageTypeStickTableDefinitionStickTableUpdateMessageTypeStickTableSwitchStickTableUpdateMessageTypeUpdateAcknowledgeStickTableUpdateMessageTypeUpdateTimedStickTableUpdateMessageTypeIncrementalEntryUpdateTimed"

var _StickTableUpdateMessageType_index = [...]uint16{0, 38, 87, 134, 177, 221, 259, 313}

func (i StickTableUpdateMessageType) String() string {
	i -= 128
	if i >= StickTableUpdateMessageType(len(_StickTableUpdateMessageType_index)-1) {
		return "StickTableUpdateMessageType(" + strconv.FormatInt(int64(i+128), 10) + ")"
	}
	return _StickTableUpdateMessageType_name[_StickTableUpdateMessageType_index[i]:_StickTableUpdateMessageType_index[i+1]]
}
